'use strict';

/**
* FUNCTION: callbackify( fcn[, transform] )
*	Gives a synchronous function an asynchronous API having a callback as its last argument.
*
* @param {Function} fcn - synchronous function
* @param {Function} [transform] - function for transforming a synchronous function's result before passing the result to a callback
* @returns {Function} function wrapper
*/
function callbackify( fcn, transform ) {

	/**
	* FUNCTION: wrapper( ...args, clbk )
	*	Applies arguments to a synchronous function and returns the result to a callback.
	*
	* @param {...*} args - function arguments
	* @param {Function} clbk - callback
	* @returns {Void}
	*/
	return function wrapper() {
		var args;
		var clbk;
		var len;
		var out;
		var i;

		len = arguments.length;
		args = new Array( len );
		for ( i = 0; i < len; i++ ) {
			args[ i ] = arguments[ i ];
		}
		clbk = args.pop();
		out = fcn.apply( null, args );
		if ( out instanceof Error ) {
			return clbk( out );
		}
		if ( transform ) {
			clbk( null, transform( out ) );
		} else {
			clbk( null, out );
		}
	}; // end FUNCTION wrapper()
} // end FUNCTION callbackify()


// EXPORTS //

module.exports = callbackify;
